{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/Staking.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n// User should able to stake their tokens (Stake)\r\n// Should able to withdraw staked tokens (Withdraw)\r\n// Claim reward based on staking (ClaimReward)\r\n\r\ncontract Staking {\r\n    IERC20 public immutable s_stakingToken; // ERC20 Token that is allowed to Stake\r\n    IERC20 public immutable s_rewardToken; // ERC20 Token that used for reward purpose\r\n\r\n    // Mapping keep track of staked token amount.\r\n    mapping(address => uint256) public s_balances;\r\n    mapping(address => uint256) public s_rewards;\r\n    mapping(address => uint256) public s_userRewardPerTokenPaid;\r\n    // Total token staked\r\n    uint256 public s_totalSupply;\r\n    uint256 public s_rewardPerTokenStored;\r\n    uint256 public s_lastUpdateTime;\r\n    uint256 public constant REWARD_RATE = 100; // 100 tokens per second\r\n\r\n    // Custom Errors\r\n    error Staking__TransferFailed(address from, address to, uint256 amount);\r\n    error Staking__InsufficientTokenToStake(\r\n        uint256 userBalance,\r\n        uint256 requiredAmt\r\n    );\r\n    error Staking__InsufficientAmount();\r\n\r\n    constructor(address stakingToken, address rewardToken) {\r\n        s_stakingToken = IERC20(stakingToken);\r\n        s_rewardToken = IERC20(rewardToken);\r\n    }\r\n\r\n    modifier updateReward(address account) {\r\n        s_rewardPerTokenStored = rewardPerToken();\r\n        s_lastUpdateTime = block.timestamp;\r\n        s_rewards[account] = earned(account);\r\n        s_userRewardPerTokenPaid[account] = s_rewardPerTokenStored;\r\n        _;\r\n    }\r\n\r\n    function rewardPerToken() internal view returns (uint256) {\r\n        if (s_totalSupply == 0) {\r\n            return s_rewardPerTokenStored;\r\n        }\r\n        return\r\n            s_rewardPerTokenStored +\r\n            (((block.timestamp - s_lastUpdateTime) * REWARD_RATE * 1e18) /\r\n                s_totalSupply);\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        uint256 currentBalance = s_balances[account];\r\n        uint256 amountPaid = s_userRewardPerTokenPaid[account];\r\n        uint256 currentRewardPerToken = rewardPerToken();\r\n        uint256 pastRewards = s_rewards[account];\r\n        uint256 earnedAmt = ((currentBalance *\r\n            (currentRewardPerToken - amountPaid)) / 1e18) + pastRewards;\r\n        return earnedAmt;\r\n    }\r\n\r\n    /**\r\n     * @dev Allow only a specific token to Stake\r\n     * @param amount Amount of token to Stake\r\n     */\r\n    function stake(uint256 amount) external updateReward(msg.sender) {\r\n        uint256 userTokenBalance = s_stakingToken.balanceOf(msg.sender);\r\n        if (userTokenBalance < amount) {\r\n            revert Staking__InsufficientTokenToStake(userTokenBalance, amount);\r\n        }\r\n        bool success = s_stakingToken.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n        if (!success) {\r\n            revert Staking__TransferFailed(msg.sender, address(this), amount);\r\n        }\r\n        s_balances[msg.sender] += amount;\r\n        s_totalSupply += amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Allow user to withdraw their Staked Tokens\r\n     * @param amount Withdraw token amount\r\n     */\r\n    function withdraw(uint256 amount) external updateReward(msg.sender) {\r\n        if (s_balances[msg.sender] < amount) {\r\n            revert Staking__InsufficientAmount();\r\n        }\r\n        s_balances[msg.sender] -= amount;\r\n        s_totalSupply -= amount;\r\n        bool success = s_stakingToken.transfer(msg.sender, amount);\r\n        if (!success) {\r\n            revert Staking__TransferFailed(address(this), msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function claimReward() external updateReward(msg.sender) {\r\n        uint256 reward = s_rewards[msg.sender];\r\n        bool success = s_rewardToken.transfer(msg.sender, reward);\r\n        if (!success) {\r\n            revert Staking__TransferFailed(address(this), msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}